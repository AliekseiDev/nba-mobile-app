import firebase from 'firebase/app';
import 'firebase/auth';
import 'firebase/database';
import 'firebase/storage';



let config = {
  apiKey: "AIzaSyB9MKH5InyDCQ5BcIsC96vUuDpVW2ri0XM",
  authDomain: "nba-app-f468d.firebaseapp.com",
  databaseURL: "https://nba-app-f468d.firebaseio.com",
  projectId: "nba-app-f468d",
  storageBucket: "nba-app-f468d.appspot.com",
  messagingSenderId: "420301560316"
};

firebase.initializeApp(config);



let firebaseDB = firebase.database();
let firebaseArticles = firebaseDB.ref('articles');
let firebaseVideos = firebaseDB.ref('videos');
let firebaseTeams = firebaseDB.ref('teams');

let firebaseLooper = snapshot => {
  const data = [];
  snapshot.forEach(childSnapshot => {
    data.push({
      ...childSnapshot.val(),
      _id: childSnapshot.key
    });
  })
  return data;
};


let actions = {

  confirmUser: (userID) => {
    let user = firebase.auth().currentUser;
    if (!user) return;
    return firebase.auth().currentUser.uid === userID;
  },

  getUserPosts: async () => {
    let userID = firebase.auth().currentUser.uid;
    
    /* GET USER'S POSTS */
    let _posts = await firebaseDB
      .ref(`/user-posts/${userID}`)
      .once('value');

    /* TRANSFORM TO A SIMPLE ARRAY WITH _id */
    _posts = firebaseLooper(_posts);

    /* POPULATING POSTS WITHOUT TEAM */
    let postRequests = _posts.map((item, i) => (
      firebaseDB.ref(`${item.type}/${item._id}`).once('value')
    ));
    let posts = await Promise.all(postRequests);

    /* TRANSFORM THEM TO A CORRECT DATA */
    const data = [];
    posts.forEach((childSnapshot, i) => {
      data.push({
        ...childSnapshot.val(),
        _id: childSnapshot.key,
        type: _posts[i].type
      });
    })

    /* POPULATING IMAGES */
    let imageRequests = data.map(async (item, i) => {
      let url = await actions.getImageUrl(item.image);
      data[i].image = url;
    });
    await Promise.all(imageRequests);

    return data;
  },

  getImageUrl: async (filename) => {
    let res = '/images/basket.jpg';
    await firebase
      .storage()
      .ref('images')
      .child(filename)
      .getDownloadURL()
      .then( url => (res = url))
      .catch(e => {
        console.log('Given default image URL');
        res = '/images/basket.jpg'
      })
    return res;
  },

  deleteArticle: (type, article) => {
    return Promise.all([
      actions.deleteImage(article.image).catch(e => console.log('Image deleted')),
      firebaseDB.ref(`/${type}/${article._id}`).set(null),
      firebaseDB.ref(`/user-posts/${article.author_id}/${article._id}`).set(null)
    ]);
    
  },

  deleteImage: async (filename) => {
    await firebase
      .storage()
      .ref('images')
      .child(filename)
      .delete()

  },

  saveArticle: async (type, dataToSubmit) => {
    return await firebaseDB.ref(type)
      .limitToLast(1)
      .once('value')
      .then((snapshot) => {
        let article = firebaseLooper(snapshot)[0];
        dataToSubmit['date'] = firebase.database.ServerValue.TIMESTAMP;
        // eslint-disable-next-line
        dataToSubmit['id'] = (article && ++article.id) || 0;
        // eslint-disable-next-line
        dataToSubmit['team'] = parseInt(dataToSubmit.team);
        dataToSubmit['author_id'] = firebase.auth().currentUser.uid;
      })
      .then(async () => {
        let userID = firebase.auth().currentUser.uid;
        
        let newPostKey = firebase.database().ref().child(type).push().key;
        let updates = {};
        updates[`${type}/${newPostKey}`] = dataToSubmit;
        updates[`/user-posts/${userID}/${newPostKey}/type`] = type;

        await firebase.database().ref().update(updates);
        
        return newPostKey;
      });
  },


  fetchTeams: async () => {
    let teams = await firebaseTeams.once('value');
    teams = firebaseLooper(teams);
    return teams;
  },

  findArticleById: async (type, param) => {
    return await firebaseDB.ref(`${type}/${param}`)
      .once('value')
      .then(async (snapshot) => {
        let article = snapshot.val();
        if (!article) throw new Error('Not Found');
        article._id = snapshot.key;

        return await firebaseTeams
          .orderByChild('id')
          .equalTo(article.team)
          .once('value')
          .then(snapshot => {
            let team = firebaseLooper(snapshot)[0];
            return {article, team};
          });
      });
  },

  findArticles: async (type, start = 0, amount = 3) => {

    let articles = [];
    await firebaseDB
      .ref(type)
      .orderByChild('id')
      .startAt(start)
      .limitToFirst(amount)
      .once('value')
      .then(async (snapshot) => {
        let _articles = firebaseLooper(snapshot);
        let requests = _articles.map(async (item, i) => {
          let url = await actions.getImageUrl(item.image);
          _articles[i].image = url;
        });
        await Promise.all(requests);
        articles = _articles;
    })
    return articles;
  }
}


export { 
  firebase, actions,


  firebaseDB,
  firebaseArticles,
  firebaseTeams,
  firebaseVideos,

  firebaseLooper
};