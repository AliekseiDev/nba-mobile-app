import React, { Component } from 'react';

import { firebase, actions } from '_firebase';
import FileUploader from 'react-firebase-file-uploader';
import FontAwesome from 'react-fontawesome';
import Image from 'components/Image';

import style from './fileUploader.css';
import Loading from 'components/Loading';

let defaultState = {
  name: '',
  isUploading: false,
  isLoaded: false,
  progress: 0,
  message: ''
}

class Uploader extends Component {

  state = {
    ...defaultState, 
    file: {
      URL: '',
      loaded: false
    }
  }

  handleUploadStart = () => {
    this.setState({ isUploading: true, progress: 0});
  }

  handleUploadError = (err) => {
    this.setState({ isUploading: false });
  }

  handleUploadSuccess = (filename) => {
    this.setState({
      isUploading: false,
      isLoaded: true,
      name: filename,
      progress: 100
    });

    actions
      .getImageUrl(filename)
      .then(url => {
        this.setState((prevState) => {
          prevState.file.URL = url;
          return prevState;
        });
      });
      
    this.props.filename(filename);
  }

  handleProgress = (progress) => {
    this.setState({progress});
  }

  renderProgress = () => {
    return this.state.isUploading ?
      <div className={style.progress}>
        <div style={{ width: `${this.state.progress}%`}}></div>
      </div>
      :
      null;
  }  

  onLoadHandler = () => {
    this.setState((prevState) => {
      prevState.file.loaded = true;
      return prevState;
    })
  }

  deleteImage = (filename) => {    
    if (!filename) return;
    actions
      .deleteImage(filename)
      .then(() => {
        this.setState({ message: 'Successfully removed' })
        this.props.filename('');
        setTimeout(() => this.setState({ ...defaultState, file: {} }), 1500);
      });
  }

  renderImage = () => {
    let className = this.state.file.loaded ? style.imageLoaded : ''; 
    return (
      this.state.file.URL ?
        <div className={style.imageWrapper}>
          <Image
            className={`${style.image} ${className}`}
            src={this.state.file.URL}
            onLoad={this.onLoadHandler}
          />
          <div className={style.deleteImage} onClick={() => this.deleteImage(this.state.name)}></div>
          { 
            this.state.file.loaded ?
              <FontAwesome name="times-circle"/>
            :
              <Loading/>
          }
        </div>
      :
        null
    );
  }/* (
    this.state.fileURL ? 
      <Image src={this.state.fileURL}/>
    :
      null 
  ) */

  renderLabel = (className) => {
    let icon = this.state.isLoaded ? 
      <div><FontAwesome name="check"/></div>
    :
      <FontAwesome name="upload"/>
    ;

    return (this.state.isUploading || this.state.isLoaded) ? 
        <div className={className}>{icon}</div>
      :
        <label className={className}>
          Upload photo
          { icon }
          <FileUploader
            accept="image/*"
            name="image"
            randomizeFilename
            storageRef={firebase.storage().ref('images')}
            onUploadStart={this.handleUploadStart}
            onUploadError={this.handleUploadError}
            onUploadSuccess={this.handleUploadSuccess}
            onProgress={this.handleProgress}
          />
        </label>

  }

  renderMessage = () => (
    this.state.message ? 
      <p style={{color: 'green', fontSize: '10px'}}>{this.state.message}</p>
    :
      null
  )

  render() {
    
    let uploaderClassName = style.uploader;
    if (this.state.isUploading)
      uploaderClassName += ` ${style.loading}`;

    return (
      <div>
      { this.renderLabel(uploaderClassName) }
      { this.renderProgress() }
      { this.renderImage() }
      { this.renderMessage() }
      </div>
    )
  }
}

export default Uploader;