import React from 'react';
import { Link, withRouter } from 'react-router-dom';
import FontAwesome from 'react-fontawesome';

import { firebase } from '_firebase';

import style from './sideNav.css';


const SideNavItems = ({hideNav, user, history}) => {

  let items = [
    {
        type: style.option,
        icon: 'home',
        text: 'Home',
        link: '/'
    },
    {
      type: style.option,
      icon: 'angle-double-up',
      text: 'My posts',
      link: '/my-posts',
      login: true
    },
    {
        type: style.option,
        icon: 'file-alt',
        text: 'News',
        link: '/news'
    },
    {
        type: style.option,
        icon: 'play',
        text: 'Videos',
        link: '/videos'
    },
    {
        type: style.option,
        icon: 'paperclip',
        text: 'Dashboard',
        link: '/dashboard',
        login: true
    },
    {
        type: style.option,
        icon: 'sign-in-alt',
        text: 'Sign in',
        link: '/sign-in',
        login: false
    },
    {
        type: style.option,
        icon: 'sign-out-alt',
        text: 'Sign out',
        link: '/sign-out',
        login: true
    }
  ]

  let signOut = () => {
    firebase
      .auth()
      .signOut()
      .then(() => {
        history.push('/');
      });
  }

  let element = (item, i) => (
    <Link onClick={hideNav} to={item.link} key={i} className={style.navItem}>
      <FontAwesome name={item.icon}/>
      {item.text}
    </Link>
  )
  
  let restricted = (item, i) => {
    
    if (!user && item.login) return null;

    if (!user && !item.login) return element(item, i);

    if (user && item.login) {
      if (item.link === '/sign-out') {
        return (
          <div
            key={i}
            onClick={() => {
              signOut();
              hideNav();
            }}
            className={style.navItem}
          >
            <FontAwesome name={item.icon}/>
            {item.text}
          </div>
        );
      }
      return element(item, i);
    }


  }
 
  return items.map((item, i) => (
    'login' in item ?
    restricted(item, i)
    :
    element(item, i)
    
  ));
};

export default withRouter(SideNavItems);