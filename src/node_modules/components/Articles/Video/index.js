import React, { Component } from 'react';

import { firebaseVideos, firebaseLooper, actions } from '_firebase';
import style from '../articles.css';

import FontAwesome from 'react-fontawesome';
import Loading from 'components/Loading';
import Header from './header';
import VideosRelated from 'components/widgets/VideosList/VideosRelated/videosRelated';
import PostData from '../Elements/postData';

class VideoArticle extends Component {

  state = {
    fetching: false,
    team: null,
    article: null,
    related: [],
    notFound: false
  }

  componentDidMount = () => {
    this.fetchData();
  }

  componentDidUpdate = (prevProps) => {
    if (prevProps.match.params.id !== this.props.match.params.id) this.fetchData()
  }

  fetchData = async () => {
    this.setState({fetching: true, related: []});
    let res = await actions.findArticleById('videos', this.props.match.params.id).catch(e => this.props.history.push('/'));
    if (!res) return;
    let {article, team} = res;
    this.getRelated();
    this.setState({article, team});
  }

  getRelated = () => {
    actions.fetchTeams()
      .then(teams => {
        firebaseVideos
          .orderByChild('team')
          .equalTo(this.state.article.team)
          .limitToFirst(3)
          .once('value')
          .then( async (snapshot) => {
            let related = firebaseLooper(snapshot);

            let requests = related.map( async (item, i) => {
              let url = await actions.getImageUrl(item.image);
              related[i].image = url;
            });
        
            await Promise.all(requests);

            related = related.filter( item => item._id !== this.state.article._id );

            this.setState({related, teams, fetching: false});
          });
      });
  }

  handleDeleteBtn = (e) => {
    this.setState({deleting: true});
    actions
      .deleteArticle('videos', this.state.article)
      .then(() => {
        this.props.history.push('/');
      });;
  }

  renderPostData = (date, author) => (
    <PostData data={{date, author}}/>
  )

  renderDeleteButton = () => (
    (this.state.article && actions.confirmUser(this.state.article.author_id)) ?
      <div className={style.deleteBtn} onClick={this.handleDeleteBtn}>
        {
          this.state.deleting ?
            <Loading/>
          :
            <FontAwesome name="trash-alt"/>
        }
      </div>
    :
      null
  )

  renderBody = (title, videoURL) => {
    return (
      <div className={style.videoWrapper}>
        <h1>{title}</h1>
        <iframe
          title="videoplayer"
          src={`https://www.youtube.com/embed/${videoURL}`}
        />
      </div>
    );
  }

  renderRelated = () => (
    this.state.related.length ? 
      <VideosRelated 
        data={this.state.related}
        teams={this.state.teams}
      />
    :
      null
  )

  render() {

    let {article, team} = this.state;
    if (!article || !team) return null;
    return (
      this.state.fetching ?
        <div className={style.loading}><Loading/></div>
      :
        <div>
          <Header team={team}/>
          {this.renderPostData(article.date, article.author)}
          {this.renderBody(article.title, article.video)}
          {this.renderDeleteButton()}
          {this.renderRelated()}
        </div>
    );
  }
}

export default VideoArticle;