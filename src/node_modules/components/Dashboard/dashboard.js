import React, { Component } from 'react';

import FormField, { serializeFormData, updateFormData, validateFormData} from 'components/FormField';
import Loading from 'components/Loading';
import Uploader from 'components/FileUploader';

import { actions } from '_firebase';

import style from './dashboard.css';

import { Editor } from 'react-draft-wysiwyg';
import { EditorState } from 'draft-js';
import { stateToHTML } from 'draft-js-export-html';


class Dashboard extends Component {

  constructor(props) {
    super(props);
    this.updateFormData = updateFormData.bind(this);
    this.validateFormData = validateFormData.bind(this);
  }

  state = {
    loading: false,
    postError: '',
    type: '',
    editorState: EditorState.createEmpty(),
    formData: {
      video: {
        element: 'input',
        value: '',
        attrs: {
          placeholder: 'Link'
        },
        validation: {
          valid: false,
          required: 'Field video is required'
        }
      },
      author: {
        element: 'input',
        value: '',
        attrs: {
          type: 'text',
          placeholder: 'Enter your name'
        },
        validation: {
          valid: false,
          required: 'Field `author` should be filled.'
        }
      },
      title: {
        element: 'input',
        value: '',
        attrs: {
          type: 'text',
          placeholder: 'Enter the title'
        },
        validation: {
          valid: false,
          required: 'Field `Title` should be filled.'
        }
      },
      body: {
        element: 'textEditor',
        value: '',
        validation: { required: 'Your article should have a text.', valid: false }
      },
      image: {
        element: 'image',
        value: '',
        validation: { required: 'Field `image` is empty.', valid: false }
      },
      team: {
        element: 'select',
        value: '',
        options: [],
        validation: { required: 'Select a team.', valid: false }
      }
    },
    video: false
  }

  componentDidMount = async () => {
    let teams = await actions.fetchTeams();
    this.setState((prevState) => {
      prevState.formData.team.options = teams;
      return prevState;
    });
  }

  storeFilename = (filename) => {
    this.setState((prevState) => {
      prevState.formData.image.value = filename;
    });
  }

  submitHandler = (e) => {
    e.preventDefault();
    let dataToSubmit;
    let valid = true;
    let {formData} = this.state;

    for (let key in formData) {
      this.validateFormData(key);
      let elem = formData[key];
      if (!elem.validation.valid) valid = false;
    }

    if (!valid) return;

    /* IF FORM IS VALID */
    let {type} = this.state;
    dataToSubmit = serializeFormData(formData);
    this.setState({ loading: true, postError: '' });
    actions
      .saveArticle(type, dataToSubmit)
      .then((id) => {
        this.props.history.push(`/${type}/${id}`);
      })
      .catch((err) => {
        this.setState({
          postError: err.message,
          loading: false
        });
      });
  }

  renderSubmitButton = () => (
    <div className={style.controls}>
      {
        this.state.loading ? 
        <Loading/>
        :
        <button type="submit">Add post</button>
      }
    </div>
  )

  renderServerErrors = () => {
    return this.state.postError ? 
    <div className={style.error}>{this.state.postError}</div>
    :
    null;
  }

  renderErrors = () => {

    let formData = this.state.formData;
    let errors = [];

    for (let key in formData) {
      let elem = formData[key];
      if (!elem.validation) continue;
      errors.push(elem.validation.validationMessage);
    }
    
    return (
      <div className={style.error}>
        {errors.join(' ')}
      </div>
    );
  }

  onEditorStateChange = (editorState) => {
    let contentState = editorState.getCurrentContent();
    let text = contentState.getPlainText().trim();
    let html = stateToHTML(contentState);

    this.setState((prevState) => {
      prevState.editorState = editorState;
      prevState.formData.body.value = text.length ? html : '';
      return prevState;
    });
  }

  renderEditor = () => (
    this.state.type === 'articles' ?
      <Editor
        editorState={this.state.editorState}
        onEditorStateChange={this.onEditorStateChange}
        onBlur={() => this.validateFormData('body')}
        editorClassName={style.editor}
        placeholder="Start typing your text"
      />
    :
      null
  )

  renderBody = () => (
    this.state.type ? 
        <form className={style.postForm} onSubmit={this.submitHandler}>
          <h2>Add post</h2>
          <div>
            <FormField
              data={this.state.formData.author}
              update={(data) => this.updateFormData('author', data)}
              onBlur={() => this.validateFormData('author')}
            />
            <FormField
              data={this.state.formData.title}
              update={(data) => this.updateFormData('title', data)}
              onBlur={() => this.validateFormData('title')}
            />
            {
              this.state.type === 'videos' ? 
                <FormField
                  className={style.video}
                  data={this.state.formData.video}
                  update={(data) => this.updateFormData('video', data)}
                  onBlur={() => this.validateFormData('video')}
                />
              :
                null
            }
          </div>
          {this.renderEditor()}
          <Uploader
            filename={(filename) => this.storeFilename(filename)}
          />
          <FormField
            data={this.state.formData.team}
            update={(data) => this.updateFormData('team', data)}
            onBlur={() => this.validateFormData('team')}
          />
          {this.renderSubmitButton()}
          {this.renderErrors()}
          {this.renderServerErrors()}
        </form>
      :

      null
  )

  setChoice = (type) => {
    switch (type) {
      case 'articles':
        this.setState((prevState) => {
          delete prevState.formData.video;
          prevState.type = type;
          return prevState;
        })
        break;

      case 'videos':
        this.setState((prevState) => {
          delete prevState.formData.body;
          prevState.type = type;
          return prevState;
        })
        break;

      default:
        return;
    }
  }

  renderChoice = () => (
    !this.state.type ?
      <div className={style.controls}>
        <h3>Choose a type of an article</h3>
        <h5>Create:</h5>
        <button style={{marginBottom: '20px'}} onClick={(e) => this.setChoice('videos')}>Video Article</button>
        <button onClick={(e) => this.setChoice('articles')}>Basic Article</button>
      </div>
    : 
     null
  )


  render() {
    return (
      <div className={style.wrapper}>
        {this.renderChoice()}
        {this.renderBody()}
      </div>
    );
  }
}

export default Dashboard;