import React, { Component } from 'react';

import { actions } from '_firebase'; 

import style from './newsList.css';
import NewsListTemplate from './newsListTemplate';
import Loading from 'components/Loading';
import Empty from '../Empty';

class NewsList extends Component {

  state = {
    fetching: false,
    articles: [],
    teams: [],
    start: this.props.start,
    amount: this.props.amount,
    noContent: false
  }

  request = async (start) => {
    this.setState({fetching: true});
    if (!this.state.teams.length) {
      let teams = await actions.fetchTeams();
      this.setState({teams})
    }

    let articles = await actions.findArticles('articles', start, this.state.amount);
    start = this.state.start + this.state.amount;

    this.setState({
      articles: this.state.articles.concat(articles), 
      start,
      fetching: false,
      noContent: articles.length ? false : true
    });

  }

  componentDidMount() {
    this.request(this.state.start);
  }

  renderButton = () => {
    return (this.props.loadmore && this.state.articles.length && !this.state.noContent) ? 
      <div className={`${(this.state.fetching ? style.loading : '')} ${style.loadmore_btn}`} onClick={this.loadmore}>
        Load more
      </div> :
      null;
  }

  renderList = () => {
    return this.state.articles.length ? (
      <NewsListTemplate
          type={this.props.type} 
          items={this.state.articles}
          teams={this.state.teams}
        />
    ) : (
      this.state.fetching ?
        <div className={style.empty}>
          <Loading/>
        </div>
      :
      null
    );
  }

  renderEmpty  = () => (
    !this.state.articles.length && !this.state.fetching ? 
      <Empty/>
    :
      null
  )

  loadmore = () => {
    if (this.state.fetching) return;
    this.setState({fetching: true});
    this.request(this.state.start);
  }

  render() {
    return (
      <div>
        { this.renderEmpty() }
        { this.renderList() }
        { this.renderButton() }
      </div>
    );
  }
}

export default NewsList;