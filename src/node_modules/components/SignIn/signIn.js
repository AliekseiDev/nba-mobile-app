import React, { Component } from 'react';

import FormField, { serializeFormData, updateFormData, validateFormData} from 'components/FormField';
import Loading from 'components/Loading';

import style from './signIn.css';
import { firebase } from '_firebase';

class SignIn extends Component {

  constructor(props) {
    super(props);
    this.updateFormData = updateFormData.bind(this);
    this.validateFormData = validateFormData.bind(this);
  }

  state = {
    loading: false,
    registerError: '',
    formData: {
      email: {
        active: false,
        element: 'input',
        value: '',
        attrs: {
          type: 'email',
          placeholder: 'Enter your email'
        },
        validation: {
          valid: false,
          required: true,
          test: [{fn: (v) => {
            return /(.+)@(.+){2,}\.(.+){2,}/.test(v);
          }, message: 'Incorrect email'}]
        }
      },
      password: {
        element: 'input',
        value: '',
        attrs: {
          type: 'password',
          placeholder: 'Enter your password'
        },
        validation: {
          required: true,
          minLength: 6,
          valid: false
        }
    }
    }
  }

  submitHandler = (e, type) => {
    e.preventDefault();
    let dataToSubmit;
    let valid = true;
    let {formData} = this.state;

    for (let key in formData) {
      let elem = formData[key];
      this.validateFormData(key); 
      if (!elem.validation.valid) valid = false;
    }

    if (!valid) return;

    /* IF FORM IS VALID */
    dataToSubmit = serializeFormData(formData);
    this.setState({ loading: true, registerError: '' });

    if (type === 'LOG_IN') {
      firebase
        .auth()
        .signInWithEmailAndPassword(dataToSubmit.email, dataToSubmit.password)
        .then(() => {
          this.props.history.push('/');
        })
        .catch((err) => {
          this.setState({loading: false, registerError: err.message});
        });
    } 
    if (type === 'REGISTER') {
      firebase
        .auth()
        .createUserWithEmailAndPassword(dataToSubmit.email, dataToSubmit.password)
        .then(() => {
          this.props.history.push('/');
        })
        .catch((err) => {
          this.setState({loading: false, registerError: err.message});
        });
    }

  }

  renderSubmitButtons = () => {
    return this.state.loading ? (
      <div className={style.loader}><Loading/></div>
    ) : (
      <div className={style.submitButtons}>
        <button onClick={(e) => this.submitHandler(e, 'REGISTER')}>Register</button>
        <button onClick={(e) => this.submitHandler(e, 'LOG_IN')}>Log in</button>
      </div>
    );
  }

  renderErrors = (element) => {
    return !element.validation.validationMessage ? null : (
      <div className={style.error}>
        {element.validation.validationMessage}
      </div>
    );
  }

  renderServerErrors = () => {
    return this.state.registerError ? 
    <div className={style.error}>{this.state.registerError}</div>
    :
    null;
  }

  render() {
    let {email, password} = this.state.formData;
    return (
      <div className={style.wrapper}>
        <form className={style.loginForm} autoComplete="off" onSubmit={this.submitHandler}>
          <h2>Register / Log in</h2>
          <div>
            {this.renderErrors(email)}
            <FormField
              data={this.state.formData.email}
              update={(data) => this.updateFormData('email', data)}
              onBlur={() => this.validateFormData('email')}
            />
          </div>
          <div>
            {this.renderErrors(password)}
            <FormField
              data={this.state.formData.password}
              update={(data) => this.updateFormData('password', data)}
              onBlur={() => this.validateFormData('password')}
            />
          </div>
          {this.renderSubmitButtons()}
          {this.renderServerErrors()}
        </form>
      </div>
    );
  }
}

export default SignIn;